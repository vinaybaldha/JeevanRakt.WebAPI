// <auto-generated />
using System;
using JeevanRakt.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JeevanRakt.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240406072400_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.BloodDonation", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DonationBloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DonationIsTested")
                        .HasColumnType("bit");

                    b.Property<int>("DonationQuantityInMl")
                        .HasColumnType("int");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DonationId");

                    b.HasIndex("DonorId");

                    b.HasIndex("InventoryId");

                    b.ToTable("BloodDonations");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.BloodInventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InventoryBloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InventoryExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryQuantityInMl")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.ToTable("BloodInventories");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.BloodRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestBloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequestIsFulfilled")
                        .HasColumnType("bit");

                    b.Property<int>("RequestQuantityInMl")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("RecipientId");

                    b.ToTable("BloodRequests");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.Donor", b =>
                {
                    b.Property<Guid>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DonorBloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DonorId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.Recipient", b =>
                {
                    b.Property<Guid>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientBloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipientId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.BloodDonation", b =>
                {
                    b.HasOne("JeevanRakt.Core.Domain.Entities.Donor", "Donor")
                        .WithMany("BloodDonations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JeevanRakt.Core.Domain.Entities.BloodInventory", "BloodInventory")
                        .WithMany("BloodDonations")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodInventory");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.BloodRequest", b =>
                {
                    b.HasOne("JeevanRakt.Core.Domain.Entities.Recipient", "Recipient")
                        .WithMany("BloodRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.BloodInventory", b =>
                {
                    b.Navigation("BloodDonations");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.Donor", b =>
                {
                    b.Navigation("BloodDonations");
                });

            modelBuilder.Entity("JeevanRakt.Core.Domain.Entities.Recipient", b =>
                {
                    b.Navigation("BloodRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
